# 202510281830
name: Python CI / Unit Tests

on:
  push:
    branches: [ main, dev, GP_Playground ]
  pull_request:
    branches: [ main, dev]

jobs:
  build_and_test:
    # Use a matrix strategy to test against multiple Python versions
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: 1. Checkout repository
      # Download repo. code
      uses: actions/checkout@v4
      
    - name: 2. Set up Python ${{ matrix.python-version }}
      # Install Python env. 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
       
    - name: 3. Setup Pip Cache
      # This step caches all dependencies based on the contents of requirements.txt
      uses: actions/cache@v4
      with:
        # Cache location for pip dependencies
        path: ~/.cache/pip
        # The key is based on the OS, Python version, and a hash of requirements.txt
        # If requirements.txt changes, the cache is busted (a 'miss') and rebuilt.
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        # Restore key attempts to find an older, compatible cache if the primary key misses
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
  
    - name: 4. Install Dependencies (and package itself)
      # Upgrade pip first to ensure latest features and bug fixes are available
      # Then install the required packages and the package itself
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: 5. Run Unit Tests
      # Assuming you have a standard 'tests/' directory and use pytest
      run: |
        # python -m unittest discover
        # python ./tests/test_checkpoint.py
        # python ./tests/test_data_samples_with_ops.py
        # python ./tests/test_experiment.py
        # python ./tests/test_model_with_ops.py
        # python ./tests/test_modules_with_ops.py
        python ./tests/test_tracking.py
        #python ./tests/test_watcher_editor.py

    - name: 6. Show Test Success or Failure
      # If any tests fail, the workflow will fail and stop executing further steps
      # If all tests pass, the workflow will continue to the next step
      if: always()
      run: echo "Tests finished for Python ${{ matrix.python-version }}"
